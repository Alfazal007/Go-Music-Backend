// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users (id, username, password) values ($1, $2, $3) returning id, username, password, refresh_token, profile_picture
`

type CreateUserParams struct {
	ID       uuid.UUID
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RefreshToken,
		&i.ProfilePicture,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
select id, username, password, refresh_token, profile_picture from users where username=$1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RefreshToken,
		&i.ProfilePicture,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
update users set profile_picture=$1 where id=$2 returning id, username, password, refresh_token, profile_picture
`

type UpdateProfileParams struct {
	ProfilePicture sql.NullString
	ID             uuid.UUID
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateProfile, arg.ProfilePicture, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RefreshToken,
		&i.ProfilePicture,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :one
update users set refresh_token=$1 where username=$2 returning id, username, password, refresh_token, profile_picture
`

type UpdateRefreshTokenParams struct {
	RefreshToken sql.NullString
	Username     string
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateRefreshToken, arg.RefreshToken, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RefreshToken,
		&i.ProfilePicture,
	)
	return i, err
}

const updateUsername = `-- name: UpdateUsername :one
update users set username=$1 where id=$2 returning id, username, password, refresh_token, profile_picture
`

type UpdateUsernameParams struct {
	Username string
	ID       uuid.UUID
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsername, arg.Username, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RefreshToken,
		&i.ProfilePicture,
	)
	return i, err
}
