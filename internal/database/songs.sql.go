// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: songs.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createSong = `-- name: CreateSong :one
insert into songs (id, name, song_link, user_id) values ($1, $2, $3, $4) returning id, name, song_link, user_id
`

type CreateSongParams struct {
	ID       uuid.UUID
	Name     string
	SongLink string
	UserID   uuid.UUID
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (Song, error) {
	row := q.db.QueryRowContext(ctx, createSong,
		arg.ID,
		arg.Name,
		arg.SongLink,
		arg.UserID,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SongLink,
		&i.UserID,
	)
	return i, err
}

const deleteSong = `-- name: DeleteSong :one
delete from songs where id=$1 and user_id=$2 returning id, name, song_link, user_id
`

type DeleteSongParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteSong(ctx context.Context, arg DeleteSongParams) (Song, error) {
	row := q.db.QueryRowContext(ctx, deleteSong, arg.ID, arg.UserID)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SongLink,
		&i.UserID,
	)
	return i, err
}

const getSongByName = `-- name: GetSongByName :one
select id, name, song_link, user_id from songs where name=$1
`

func (q *Queries) GetSongByName(ctx context.Context, name string) (Song, error) {
	row := q.db.QueryRowContext(ctx, getSongByName, name)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SongLink,
		&i.UserID,
	)
	return i, err
}
